@using HttpClient.ClientInterfaces
@using Domain.DTOs.UserDTO
@inject IUserService userService
@inject NavigationManager navMgr
@page "/Registration"

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h3>Sign Up!</h3>
            <div class="field">
                <label>Username:</label>
                <input type="text" @bind="userName"/>
            </div>
            <div class="field">
                <label style="text-align: center">Password:</label>
                <input type="password" @bind="password"/>
            </div>
            @if (!string.IsNullOrEmpty(errorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="RegisterAsync">Sign Up</button>
            </div>
            <div class="d-flex justify-content-center mt-3"><p class="mb-0 me-1">Already a user? </p><a href="/Login">Log In!</a></div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>Hello, @context.User.Identity.Name</h3>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string userName = "";
    private string password = "";
    private string errorLabel;

    private async Task RegisterAsync()
    {
        errorLabel = "";
        try
        {
            UserCreationDTO userToCreate = new()
            {
                Username = userName,
                Password = password
            };
            await userService.CreateAsync(userToCreate);
            navMgr.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"{e.Message}";
        }
    }
}